
! Основные понятия нагрузочного тестирования. !

Предпосылки НТ.
 - Большое количество пользователей.
 - Требования по скорости и производительности.
 - Требования по стабильности работы.
 - Выбор программно-аппаратных средств.


Типы нагрузочного тестирования (Performance testing).
 - Load testing
	- Max capacity testing - тестирование максимальной производительности.
	- Validation testing - тестирование на соответствие требований (приёмочное тестирование).
 	- Capacity testing, Performance modeling and Prediction -
	  моделирование нагрузки и прогнозирование.
	- Bottleneck Detection - Поиск узких мест.
	- Custom testing - проверка различных гипотез.
	- Volume testing - поведение системы, при увеличении объёма дынных.

 - Benchmarking - оценивает отностительную производительность тестируемого объекта
		  (применяется к программному и аппаратному обеспечению).

 - Smoke testing - быстрое тестирование основной функциональности системы перед запуском,
		   большого нагрузочного теста, чтобы ошибки функциональной части,
		   не исказили результаты теста.

 - Configuration testing -  позволяет сравнить несколько вариантов конфигураций системы,
			    например, для выявления максимально производительной.

 - Scalability testing - тестирование масштабируемости.

 - Regression (Release) testing - тестирование новых и старых элементов системы.

 - Component testing - тестирование отдельных компонентов.
	- Isolation testing - компоненет тестируется отдельно от системы.
	- Integrational testing - создаётся контур, где развёрнуты все связные компоненты.
	
 - Reliability testing - тестирование надёжности.
	- Stability testing - проведение длительных тестов (на накопление ошибок / утечек).
	- Failover testing - тестирование отказаустойчивости (отключение связных компонентов).
	- Spike testing - возможность и время востановление системы, после стерс-нагрузки.


Нефункциональные требования к системе.
 - Быстродействие.
	- Определяется временем отклика операции.
	- Операции могут делиться на потенциально быстрые (вход в систему) и медленные (запрос к БД).
 - Производительность.
	- Определяется числом выполняемых операций в секунду.
	- Требования к ней, устанавливаются на основе статистики или бизнес требований.
 - Масштабируемость.
	- Способность системы обеспечить Быстродействие и Масштабируемость, при изменяющихся (растущих) условиях.
 - Стабильность.
	- Определяется его способностю функционировать в течении длительного времени.
	- Уметь возвращаться в исходное состояних, после стрессовых ситуаций и сбоев.



! Моделирование нагрузки. !

Тестовая модель.
 - Тестовый стенд.
 - Тестовые данные.
 - Подаваемая нагрузка.

Значимые операции.
 - Высокоинтенсивные операции.
	- Создание отчётов.
 - Критически важные операции.
	- Зачисление процентов.
 - Операции, создающие большую нагрузку на систему.
	- Часто выполняемые операции.


Моделирование действий пользователя.
 - Бизнесс-кейс
	- Последовательность действий пользователей.
	- Данные, вводимые пользователями.
	- Результаты выполнения действий.

 - Методы.
	- Метод полного пути.
	- Метод сгментов.
	- Метод обобщений.


Создание нагрузочных скриптов.
 - Запись скрипта средством автоматизированного тестирования.
	- Посредством специальных сервисов (Jemeter, LoadRunner).
 - Объявление транзакции.
	- Для вычисления в дальнейшем, на какие шаги, уходит больше времени.
	- Обнаружение мест нахождения ошибок.
 - Корреляция.	
	- Установление зависимости отправляемых и получаемых данных.
 - Параметризация.
	- Замена дынных введёны при записи скрипта, на параметры.
	- Значения могут быть сгенерированы случайным образом.
 - Добавление вариативности логики выполнения.
 - Обработку ошибочных ситуаций.


Транзакции.
Для измерения времени отклика отдельных операций, код скрипта разделяется на транзакции.
Минимальне число транзакций - число бизнес-функций.
Транзакции могут быть вложенными.

 - Нэйминг транзакций.
	- Порядковый номер бизнес-кейса (user-case).
	- Номер транзакции.
	- Описание транзакции (Название объекта тестирование : действие).


Группы пользователей (user group).
Некоторое число виртуальных пользователей, работающих по одному сценарию.
Пользователи распределяются по группам в соответствии с бизнес-кейсами.


Нагрузочный профиль.
Набор операций и их интенсивномти, подогнаные под реальную ситуацию.
* При моделировании нагрузочного профиля, необходимо учитывать среднюю и пиковую
  нагрузки на систему в иследуемой модели/моделях. Нужно учитывать, что нагрузка
  может сильно колебаться от времени суток, дня недели и месяца. Так например,
  вечером пятница, нагрузка может колоссально отличаться от вечера понедельника, 
  а нагрузка в декабре, может в несколько раз превышать февральскую.
  Исходя их этого, подбираюьтся оптимальные значения для тестирования сервиса.
  Однако, они всегда берутся с запасом, порой кратным.


Сценарий теста.
При написании сценарии теста, регулируются количество Vuser и интенсивность их 
взаимодействия с сервисом.

 - 1 Сценарий - Smoke test -проверка работаспособности скриптов.
 - 2 Сценарий - Baseline - проверка корректности тестовой модели (стенда).


Расчет параметров интенсивности нагрузки.
* В файле calc_apram_load.



 ! Планирование и реализация нагрузочного проекта !


Жизненный цикл нагрузочного тестирования.

Проверка системы на соответствие требованиям
		->
	Поиск проблемы
		->
	Устарнение проблемы
		->
Проверка системы на соответствие требованиям


Этапы нагрузочного проекта.

	Анализ тестируемой системы:
	- Требования к производительности и временам отклика.
	- Значения текущей, прогнозируемой и пиковой нагрузки.
	- Архитектуру продуктивной и тестовой сред.
	- Характер и веичину фоновой нагрузки.


	Этапы нагрузочного проекта:
	- Список тестируемых операций.
	- Правила генерации тестовых данных.
	- План тестирования (время / ресурсы).
	- Стратегия минимилизации рисков.


Методология нагрузочного тестирования:
- Анализ тестируемой системы.
		->
- Разработака методики тестирования.
		->
- Разработака нагрузочных скриптов.
		->
- Выполнение тестовых сценариев.
		->
- Анализ результатов.

В зависимости от результатов, может потебоваться тюнинг системы
и соответственно, мотодик тестирования и нагрузочных скриптов.


Проведение нагрузочного тестирования.
Этапы проведения:
 - Начинается с прогона теста по профилю из методики.
			->
 - Экспресс-анализ результатов теста, для информирования заказчика.
			->
 - По результатам, должны быть собраны:
	- логи инструментов
	- логи серверов
	- логи метрик производительности
			->
 - Написание и оформление отчёта с дальнейшей презентацией его заказчике


Отчет о результатах нагрузочного тестирования.
Задача отчета:
 - Описать проведённый тест(ы):
	- Цель
	- Профиль
	- Время проведения
	- Особенности
 - Выводы по результатам тесты:
	- Оценка производительности системы
	- Интенсивность выполняемых операций в % профиля
	- Соответствие системы требованиям
	- Выявление узких мест
	- Утилизация ресурсов системы под высокой нагрузкой
 - Рекомендации по улучшению системы:
	- Подкрепить доводы результатами тестов
	- Графиками (можно с комментариями)



 ! Записки с лекций !

Задача бизнеса: нужна большая зелёная кнопка для создания отчётов. 
Модель Waterfall:
	Бизнес
	->
	Аналитик (от бизнеса)
	->
	Разработчик
	->
	Функциональный тестировщик
	->
	Нагрузочное тестирование
	->
	User testing Аналитиком
	->
	Пол года работы...
	->
	Релиз
	-!

Задача бизнеса: нужна большая зелёная кнопка для создания отчётов. 
Модель Agile:
	Бизнес
	->
Команда: Аналитик, Разработчкие, Функциональный+Автоматизированый+Назгрузочный тестировщик, DevOps-инженер
	->
	Месяц работы...
	->
	Релиз
	-!










