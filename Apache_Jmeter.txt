 ! Установка и настройка !
Качаем.
wget https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.6.3.tgz
Разархивируем.
tar -xvzf apache-jmeter-5.6.tgz
Перемещаем.
sudo mv apache-jmeter-5.6 /opt/jmeter
Правим конфиг (Если ком. оболочка стандарнтная).
nano ~/.bashrc
export PATH=$PATH:/opt/jmeter/bin
Применяем изменения.
source ~/.bashrc

Скачать плагин.
sudo mv jmeter-plugins-manager-1.3.jar /opt/jmeter/lib/ext/

Меняем количество потребляемой памяти. Меняем на -Xms2g -Xmx2g, чтобы было 2Gb.
/opt/jmeter/bin/jmeter.bat
if not defined HEAP (
    rem See the unix startup file for the rationale of the following parameters,
    rem including some tuning recommendations
    set HEAP=-Xms2g -Xmx2g -XX:MaxMetaspaceSize=256m
)


Добивить плагины.
Plagins:
3 Basic Graphs
5 Additional Graphs 
Auto-Stop Listener 
Custom Thread Groups 
Distribution/Percentile Graphs 
Dummy Sampler
Flexible File Writer
KPI vs KPI Graphs
Plugins Manager
Random CSV Data Set
Weighted Switch 
Controller jmeter - Core
jmeter - FTP Protocol Support 
jmeter - HTTP Protocol Support
jmeter - JDBC Support
jmeter JMS Support
jmeter - JUnit Support
jmeter Java Components
jmeter - LDAP Protocol Support
jmeter - Mail/SMTP Support
jmeter - MongoDB Support
jmeter - OS Process Support
jmeter - TCP Protocol Support
jmeter - Various Core Components


Настройка Thread Group
Action to be taken after a Sampler error - действие принимаемое при ошибки сэмплера.
Number of Threads (users) - Кол-во пользователей или потоков работающих параллельно.
Ramp-up period (seconds) - Период в начале теста, когда пользователи будут постепенно заходить.
Loop count - Кол-во повторений содержимого Thread Group.
Duration - Длительность теста.

Настройка Sampler. HTTP Request.

Boundary Extractor - Позовляет забрать из текста значение, между указаными границами.
Настройки:
	Apply to - Указать в каких результатах будет производиться поиск.
Regular Expressions Extractor - Схож с Boundary Extractor, но вместо границ, можно указать регулярку и порядковый номер группы выражения, которое нужно получить в результате.
	Template - нужно в значках $ $ значения которой нужно присвоить переменной.
Debug Sampler - Позволяет считать значения переменных и свойств, на указаном участке скрипта.

JSR223 Sampler - Компонент, который позволяет написать скрипт на языке groovy
vars.get("Имя переменной") - Получить занчение переменной созданной внутри Jmeter.
Interger.parseiInt("Имя переменной") - Для преобразования переменной в число.
vars.put("Имя переменной", "Значение") - Для передачи значения из Sampler в переменную Jmeter.

Создание переменной с помощью экстрактора.

Часто используемые компоненты JMeter:
Loop Controller - позволяет повторить действия определенное количество раз.
Once Only Controller - позволяет ограничить выполнение действий только одним разом в первой итерации повторяющегося участка тестового сценария.
Throughput Controller - позволяет указать, в каком проценте случаев будет выполняться каждый из внутренних компонентов контроллера.
Include Controller - позволяет использовать внешний JMX-файл.
Другие компоненты с кратким описанием.

---------------------------------------------------------------------------------------

 ! Синтаксис по языку Groovy !
vars.get("myVariable")       // Получить значение переменной
vars.put("myVariable", "123") // Установить значение переменной

ctx — объект контекста (типа JMeterContext), который содержит информацию о текущем состоянии теста.
ctx.getPreviousResult() // Доступ к предыдущему результату

props — глобальные свойства JMeter. Эти свойства доступны для всего теста и не зависят от потока.
props.get("myProperty")       // Получить значение свойства
props.put("myProperty", "abc") // Установить значение свойства

log.info("Сообщение")   // Запись информационного сообщения
log.error("Ошибка")     // Запись сообщения об ошибке

sampler — объект текущего сэмплера (типа Sampler), который позволяет получить данные о запросе.
sampler.getName() // Получить имя сэмплера
sampler.getUrl()  // Получить URL запроса

prev — объект с предыдущим результатом (типа SampleResult). Часто используется для работы с ответами.
prev.getResponseDataAsString()  // Получить данные ответа в виде строки
prev.getResponseCode()          // Код ответа (например, 200 для успешных запросов)
prev.getTime()                  // Время выполнения запроса

JsonSlurper — для парсинга JSON-ответов.
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def response = jsonSlurper.parseText(prev.getResponseDataAsString())
def value = response.someKey // Доступ к JSON-полю

XmlSlurper — для парсинга XML-ответов.
import groovy.xml.XmlSlurper
def xmlSlurper = new XmlSlurper()
def response = xmlSlurper.parseText(prev.getResponseDataAsString())
def value = response.someElement.text() // Доступ к XML-элементу

if (prev.getResponseCode() == '200') {
    log.info("Успешный ответ")
} else {
    log.warn("Ошибка в запросе")
}

Циклы:
for (int i = 0; i < 5; i++) {
    log.info("Итерация " + i)
}

Чтение из файла:
def fileContent = new File("/path/to/file.txt").text
log.info(fileContent)

Запись в файл:
new File("/path/to/file.txt").write("Содержимое файла")

Thread.sleep(1000) // Задержка на 1 секунду

Генерация случайных данных:
def randomValue = UUID.randomUUID().toString()
vars.put("randomUUID", randomValue)

---------------------------------------------------------------------------------------

archCount = vars.get("title_matchNr");  // Заводим переменную с количеством разделов.
result = "";  

for (i=1; i <= Integer.parseInt(archCount);i++){	// Запускаем цикл, в котором будем конкатенировать 
	chapter = vars.get("title_" + i);			// вычисляемые значения и добавлять их в переменную result.
	lining = vars.get("content_"+ i).length(); 
	result += "${i} : " + chapter + " : " + lining + "\n" 
	};

Рабочая версия 1-ой задачки:
	archCount = vars.get("title_matchNr");  // Заводим переменную с количеством разделов.
	result = "";  

	for (i=1; i <= Integer.parseInt(archCount);i++){	// Запускаем цикл, в котором будем конкатенировать.
		chapter = vars.get("title_" + i);			// вычисляемые значения и добавлять их в переменную result.
		lining = vars.get("content_"+ i).length(); 
		result += "${i} : " + chapter + " : " + lining + "\n" 
		};

	// Получаем путь к рабочей директории.
	def currentDir = new File("${__BeanShell(vars.get('PWD'))}").absolutePath

	// Задаем имя файла и путь к нему.
	def filePath = currentDir + "/result_UC01A_HabrRegEx.txt"


	// Открываем файл и записываем данные.
	def file = new File(filePath)

	// Если файл не существует, создаем его.
	if (!file.exists()) {
	    file.createNewFile()
	}
	// Записываем значение переменной result в файл.
	def fileWriter = new FileWriter(file, false)
	fileWriter.write(result)
	fileWriter.close()

	// В случае, если файл с таким именем уже существует, то он просто перезапишется.

	log.info("Файл успешно создан в рабочей директории: " + filePath)
	log.info("Запись в файл завершена. Данные: \n" + result)


archCount = vars.get("Microarchitecture_matchNr")
result = "Microarchitecture_matchNr: \n"

for (i=1; i <= Integer.parseInt(archCount);i++){
	result += vars.get("Microarchitecture_" + i) + "\n"
	}

return (result)  // Выводим все найденые совпадения на новой строчке.
// return (archCount)  // Выводим кол-во найденых совпадений.


// Получение текста раздела
String sectionName = vars.get("section_" + vars.getIteration());
int sectionLength = sectionName.length();

// Формирование строки для вывода
String line = vars.getIteration() + " : " + sectionName + " : " + sectionLength + "\n";

// Сохраняем строку в переменной
vars.put("output_line", line);
