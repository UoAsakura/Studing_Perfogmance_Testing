

Что такое LR? Что входит в его состав? Опишите функциональность этих компонентов
LoadRunner - это инструмент для тестирования производительности приложений. Он позволяет моделировать нагрузку на систему и анализировать, как она будет работать под различными нагрузочными условиями. LoadRunner помогает определить производительность системы, найти узкие места и оценить, сколько пользователей система может обслуживать без потери качества.

VuGen (Virtual User Generator)
Функциональность: VuGen используется для создания и записи скриптов, которые моделируют действия виртуальных пользователей (Vusers). Эти скрипты воспроизводят действия реальных пользователей при взаимодействии с системой: переход по страницам, отправка данных, выполнение транзакций и т.д.
Запись сценариев на различных протоколах (HTTP, Web Services, SOAP, FTP и многих других).
Возможность редактирования и параметризации скриптов.
Внедрение корреляций для динамически изменяющихся значений (например, идентификаторы сессий).
Поддержка различных языков программирования, включая C и JavaScript.

Controller (Load Controller)
Функциональность: Controller отвечает за управление и настройку тестов нагрузки. Он координирует выполнение скриптов, распределяет виртуальных пользователей и контролирует параметры сценария нагрузки.
Настройка сценария нагрузки: количество пользователей, тип нагрузки (например, постепенное увеличение или постоянная нагрузка), длительность теста.
Настройка профилей пользователей и распределение Vusers по группам.
Управление и мониторинг тестов в реальном времени: Controller позволяет следить за метриками и состоянием нагрузки.
Подключение к мониторам системы для получения данных о производительности серверов.

Analysis (LoadRunner Analysis)
Функциональность: Analysis используется для анализа результатов теста и создания отчетов. После завершения теста Analysis помогает собирать данные, визуализировать их и выявлять узкие места в системе.
Основные возможности:
Обработка данных и построение различных графиков: время отклика, использование ресурсов (CPU, память, диск) и т.д.
Сравнение результатов разных тестов.
Выявление узких мест, ошибок и потенциальных проблем.
Экспорт отчетов в различных форматах для презентаций или детального анализа.


Какой протокол использовался  Вами при написании скриптов?
HTTP


Что такое транзакции в скрипте? Как они расставляются? Зачем они нужны?
Транзакции — это обозначенные участки кода в скрипте, которые позволяют замерять время выполнения определённых операций или действий. Они помогают измерить время отклика ключевых операций, таких как загрузка страницы, выполнение запроса к базе данных или выполнение транзакции в системе.
Они расставляются в соответствии с оперециями. То есть, мы начинаем её запись перед одной из них и завершаем, сразу после её окончания.
Напрмер:
	Начало записи
		UC_01_TR_01_Главная_страница
			Остановка записи
	Начало записи
		UC_01_TR_02_Каталог_товаров
			Остановка записи
	Начало записи
		UC_01_TR_03_Продукт
			Остановка записи

Транзации нужны для следующего.
Измерение производительности: Транзакции позволяют получить точное время отклика для конкретных операций, что помогает в анализе производительности.
Определение узких мест: С помощью транзакций можно выявить, какие именно действия или запросы занимают больше всего времени и могут вызывать задержки в системе.
Сравнение с SLA: Транзакции помогают оценивать выполнение соглашений об уровне обслуживания (SLA) и других требований к производительности.
Анализ стабильности системы: Сравнивая время отклика на одинаковые действия в разных сессиях тестирования, можно выявить колебания производительности и нестабильное поведение системы.


Зачем нужен think_time в скриптах? Как его выставлять и что важно учитывать при этом?
Это пауза, имитирующая время, которое пользователь тратит на осмысление действий или выполнение реальных операций между шагами. Например, это время, которое пользователь проводит, просматривая страницу перед переходом на следующую, или время, затраченное на заполнение формы.

Think time добавляется в скрипт с помощью функции lr_think_time(seconds), где seconds — это время в секундах.

При этом нужно помнить следующее:
Анализ реальных данных: Think time лучше выставлять на основе анализа данных, например, из логов или аналитики, чтобы учитывать среднее время между действиями реальных пользователей.
Использование случайных значений: Реальные пользователи могут проводить разное количество времени на страницах, поэтому рекомендуется применять случайные значения в think time для различных пользователей. Это можно реализовать с помощью функции rand() или использовать диапазоны.
Think time в различных режимах тестирования:
	Тестирование производительности: Использовать think time, чтобы имитировать реальных пользователей и предотвратить создание нереалистичной нагрузки.
	Стресс-тестирование: Think time обычно уменьшают или убирают, чтобы максимально нагрузить систему и оценить её пределы производительности.
	Регулировка think time в Controller: В Controller можно установить процент think time для всех виртуальных пользователей. Например, уменьшив think time до 50%, можно ускорить тест и увеличить нагрузку на систему.
Учет SLA (Service Level Agreement): При анализе времени отклика и других показателей производительности важно учитывать think time, так как он влияет на нагрузку и результат тестирования.


Какие два значения нужно настроить в сценарии LoadRunner, чтобы добиться целевой интенсивности?
Количество виртуальных пользователей (Vusers) и Параметры времени (Ramp-up, Duration)


Что такое pacing? Опишите подход для его расчета
Это параметр, который позволяет контролировать интервал между запросами, отправляемыми виртуальными пользователями (Vusers), чтобы регулировать производительность нагрузки и интенсивность теста.

В LoadRunner нужно указать pacing – время одного цикла, включающего собственно выполнение операции и задержку перед стартом следующей операции. Чтобы в час было выполнено 25 операций на один такой цикл нужно 3600/25=144 секунды.

Пример расчёт (из лекций):
1) Рассчитать максимальное количество операций на 1 виртуального пользователя (VU) в час.
Максимальное количество операций на 1 VU в час = 3600 / Длительность операции, сек
2) Рассчитать количество виртуальных пользователей для обеспечения всей нагрузки, округлить до целого в большую сторону.
Количество VU = Нагрузка, операций в час / Максимальное количество операций на 1 VU в час
3) Рассчитать количество операций на 1 виртуального пользователя в час.
Количество операций на 1 VU в час = Нагрузка, операций в час / Количество VU
4) Расcчитать pacing для LoadRunner.
Pacing = 3600 / Количество операций на 1 VU в час
Количество операций на 1 VU в минуту = Количество операций на 1 VU в час / 60

1) 1 vu = 3600 / 8 = 450
2) Количество VU = 2000 / 450 = 4,44 = 5 (округляем)
3) Количество оперций на 1VU в час = 2000 / 5 = 400
4) Pacing = 3600 / 400 = 9


Что будет если pacing выставлен неправильно? (Больше/Меньше чем нужно, опишите оба варианта)
Если pacing установлен слишком высоким, т.е. виртуальные пользователи будут слишком долго ждать между запросами, то это приведет к следующим последствиям:
Возможные проблемы:
	- Снижение интенсивности нагрузки
	- Недооценка производительности системы
	- Неудачное тестирование под реальные сценарии
Пример:
Если мы хотим провести нагрузочное тестирование с 500 виртуальными пользователями, но установили pacing на 60 секунд, то каждый виртуальный пользователь будет делать запрос только раз в минуту, что приведет к очень низкой нагрузке на систему, и тест будет неэффективным.

Pacing слишком маленький (слишком короткие паузы или полное отсутствие пауз)
Если pacing слишком маленький (или отсутствует вовсе), то виртуальные пользователи будут делать запросы почти непрерывно, что также приводит к ряду проблем:
Возможные проблемы:
	- Искусственно высокая нагрузка
	- Нереалистичное поведение пользователей
	- Стресс-тестирование вместо нагрузочного теста
Пример:
Предположим, что у нас есть 100 виртуальных пользователей, но pacing установлен на 0 секунд. Все 100 пользователей будут делать запросы практически одновременно, что может создать нагрузку на сервер в 100 раз выше, чем предполагается в реальном сценарии. Это приведет к искусственно высокому числу запросов и, возможно, перегрузке системы.


Какие виды pacing есть в LR?
LoadRunner предоставляет несколько видов pacing, включая фиксированные и случайные интервалы, а также возможность настройки pacing через интерфейс Controller или функции API в скрипте. Правильная настройка pacing позволяет имитировать поведение реальных пользователей, контролировать нагрузку на систему и проводить более точные и реалистичные тесты.
Fixed Pacing (Фиксированное время)
Random Pacing (Случайное время)
Constant (Постоянная скорость)
Pacing via LoadRunner Controller (Pacing через Controller)
Pacing через lr_pacing (API-функция)
Pacing через lr_think_time (API-функция)


Что даёт разделение скрипта на Init, Run и End?
Организация и чистота кода: Разделение сценария на эти три части помогает улучшить структуру теста, сделать его более читаемым и поддерживаемым. Каждая часть имеет четкую роль и выполняет отдельные задачи, что способствует логическому разделению тестового процесса.

Оптимизация производительности: Некоторые операции, например, аутентификация или инициализация переменных, нужно выполнять только один раз для каждого виртуального пользователя. Разделение на Init помогает избежать дублирования этих операций, улучшая производительность.

Логика выполнения: Разделение позволяет чётко различать одноразовые операции (Init), повторяющиеся действия в ходе теста (Run) и завершающие действия (End). Это помогает организовать логику сценария и легко масштабировать его, добавляя новые операции в нужные места.

Гибкость и переиспользуемость: Можно легко использовать одну и ту же инициализацию или завершение для различных тестов, изменяя только часть Run для симуляции различных пользовательских действий.

Управление состоянием: Важно, чтобы виртуальные пользователи начинали тест с заранее определённым состоянием (Init), выполняли свою основную задачу (Run) и завершали работу корректно (End), что позволяет более точно моделировать поведение реальных пользователей.


Что такое Параметризация? Как реализуется в скриптах?
Это процесс замены фиксированных значений в скрипте на переменные, значения которых могут изменяться в зависимости от различных факторов, таких как время выполнения теста, данные, полученные из внешних источников или результат выполнения других запросов. Параметризация позволяет моделировать более реалистичное поведение пользователей, улучшая воспроизводимость сценариев, а также позволяя имитировать различные условия нагрузки.
Реализуется с помощью использования встроенных функций, которые позволяют создавать переменные для различных данных и динамически подставлять их в запросы, действия и другие части сценария. LoadRunner предоставляет несколько способов параметризации, которые могут быть применены в скриптах.
При выполнение ДЗ, использовались такие функции как: web_reg_save_param(), lr_save_string(), web_reg_save_param_json(), web_add_auto_header(), а также Parametr List.


Что такое Корреляция? Как реализуется в скриптах?
Это процесс извлечения динамических значений из ответов сервера и последующей их подстановки в запросы, отправляемые серверу в ходе выполнения теста. Корреляция необходима для обработки значений, которые меняются на каждом шаге сценария, такие как идентификаторы сессий, токены безопасности, уникальные номера заказов и другие параметры, генерируемые сервером в ответ на запросы.
Её можно выполнять при помощи в том числе выше перечисленных функций, как web_reg_save_param(), web_url(), web_submit_data().


Что можно настроить в Run Time Settings обычного веб скрипта?
Run Logic - скрипт будет выполняться согласно тем параметрам, которые были заданы в скрипте.
Pacing - установка режима воспроизведения теста как виртуальный пользователь. Выбор этого параметра позволяет запустить тест с нужной конфигурацией нагрузки.
Log - уровень логирования, который определяет, сколько информации будет выводиться в логи (например, только ошибки, базовый, подробный и т.д.).
Think Time:
Устанавливает время задержки (симулирует время, которое реальный пользователь тратит на взаимодействие с веб-страницей). Обычно задается в миллисекундах.
Additional Attributes - Определять, отвечает ли система требованиям к производительности.
Miscellaneous (Прочие настройки) - дополнительные настройки.
Preferences (Предпочтения) - Настройки языка, кодировки и форматов данных, например, часового пояса. 
Browser Emulation (Эмуляция браузера)
Network (Сеть) - Proxy Settings и DNS Caching
Content Check (Проверка содержимого)


Какую информацию по тесту можно просматривать в Controller'e?
Статистика виртуальных пользователей (Vusers)
	- Running (Запуск)
	- Waiting (Ожидание) 
	- Stopped (Остановлен)
	- Error (Ошибка)
Графики и Диаграммы производительности
	- Response time (Время отклика) 
	- Throughput (Пропускная способность) 
	- Hits per second (Запросы в секунду)
	- Virtual Users per second (Виртуальные пользователи в секунду)
	- Transactions per second (Транзакции в секунду)
Detailed Runtime Statistics (Подробная статистика выполнения)
	- Throughput & Bandwidth (Пропускная способность и полоса пропускания)
	- Error Rates (Частота ошибок)
	- Response Times (Время отклика)
Мониторинг системных ресурсов
	- CPU
	- Disk I/O
	- Memory
	- Network
Сводка по транзакциям (Transaction Summary)
	- Распределение транзакций
	- Время завершения транзакций
	- Транзакции и их успешность
Реальное время (Real-Time Data)
	- Real-Time Monitoring (Мониторинг в реальном времени)
	- Live Metrics
Данные о завершении теста и результаты
	- Test Summary (Сводка по тесту)
	- Results Comparison (Сравнение результатов)
Error Logs (Логи ошибок)
	- Detailed Error Logs
	- Error Filtering
Группировка и фильтрация данных
	- Filtering Data (Фильтрация данных)
Reporting (Отчеты)
	- Custom Reports (Пользовательские отчеты)
	- Export Data (Экспорт данных)


Опишите последовательность действий для проверки попадания в профиль
Запись или создание скрипта
	->
Включиние шагов для авторизации
	->
Параметризация учетных данных
	->
Проверка ответа после логина
	->
Обработка ошибок
	->
Проверка уникальных параметров профиля
	->
Валидация данных профиля
	->
Выполнение проверки профиля
	->
Валидация ключевых данных
	->
Проверка лога выполнения
	->
Анализ выполнения


Для чего нужен Analysis?
Он предназначен для анализа и интерпретации результатов тестирования производительности, проведенного с помощью LoadRunner. Его главная задача - обработать и структурировать данные, полученные после выполнения сценариев нагрузки, чтобы дать исчерпывающее представление о работе тестируемой системы и выявить возможные проблемы. Analysis помогает выявить узкие места и области для оптимизации, а также предоставляет данные для последующей диагностики и улучшения производительности.






























