
1) Что такое JMeter?
Это инструмент для проведения нагрузочного тестирования, представляющий собой десктопное приложение с открытым исходным кодом на базе Java. JMeter позволяет определить, может ли тестируемое веб-приложение удовлетворять требованиям высокой нагрузки или нет. Он также помогает проанализировать работу всего сервера под высокой нагрузкой.

2) Какие протоколы поддерживает JMeter?
HTTP, HTTPS, JDBC, FTP, JMS, LDAP, SOAP, TCP и также почтовых протоколов и shell-скриптов.

3) Какие основные различия между JMeter и Load Runner?
1.JMeter: Бесплатный и с открытым исходным кодом (Apache License 2.0). Можно свободно использовать и модифицировать для своих нужд.
LoadRunner: Платный инструмент с лицензией от Micro Focus. Лицензия может быть дорогой, особенно для крупных тестов с высокой нагрузкой.

2. LoadRunner поддерживает гораздо больше протоколов (более 50), таких как HTTP/HTTPS, SAP, Citrix, Oracle, и многие другие корпоративные приложения. Это делает его более универсальным для тестирования сложных корпоративных систем.

3. JMeter может быть более понятным в процессе обучения, а также поддерживает скрипты на BeanShell и Groovy, в отличие от LoadRunner у которого скрипты чаще всего пишутся на Си. Помипо этого, он находится в одном приложении, а не в трёх разных.

4. Для отчётов графики и статистки в JMeter обычно используют Grafana и InfluxDB, в LoadRunner есть втроенные инструменты для этого.

5. JMeter хорошо масштабируется на кластеры, но требует дополнительных инструментов (например, Kubernetes, Docker) или распределенного запуска для высокой нагрузки. 
LoadRunner спроектирован для крупных нагрузочных тестов. С его помощью можно легко тестировать сотни тысяч виртуальных пользователей. Поддерживает кластеризацию и распределенное тестирование «из коробки».

4) Какой синтаксис у переменных JMeter?
Испоьлзование внутри запросов:
${имя_переменной__значение_по_умолчанию}
При взаимодействии с Groovy:
def myVariable = vars.get("имя_переменной")       // Получение значения переменной
vars.put("имя_переменной", "значение")            // Установка значения переменной

5) Для чего нужен Function Helper и как его вызвать?
Function Helper помогает создавать и вставлять встроенные функции JMeter в тестовые планы. Эти функции полезны для генерации динамических данных, таких как случайные числа, даты, строки, а также для работы с переменными, парсинга JSON и выполнения других операций, которые могут понадобиться в тесте.
 - Просмотр доступных функций
 - Создание и настройка функций
 - Генерация строки для вставки
Вызов Function Helper: в верхнем меню выберите Options (Опции) -> Function Helper Dialog…. Откроется диалоговое окно Function Helper.

6) Для чего может быть нужен запуск JMeter в Non-GUI режиме?
Во-первых для снижения потребления системных ресурсов. Если у нас большой и высоконагруженный тест с десятками тысячами виртуальных пользователей, то разница будет ощутимой. Так же при проведении подобного теста в GUI режиме приложение просто напросто может перестать отвечать или выйти из строя.
Во-вторых для автоматизации тест-кейсов, например с использованием пайплайнов, когда скрипты запускаются вручную без необходимости ручного вмешательства или непрерывной интеграции (например, Jenkins, GitLab CI/CD). 
В третьх, для удалённого запуска, напрмер, когда GUI интерфейс отсутствует (голая командная оболочка).
Non-GUI режим позволяет сохранять результаты тестирования в файлы (.jtl, .csv и другие), что может упростить анализ. 

7) Что такое Test Plan?
Основной контейнер, который определяет всю структуру и логику теста производительности или нагрузочного теста. В тестовом плане задаются все элементы теста, от конфигурации до сценариев и обработки результатов, и он определяет, как JMeter должен выполнять тестирование. Без тестового плана JMeter не может выполнять тест, поскольку все элементы теста должны быть включены в этот план.

8) Что такое Thread Group?
Это основной элемент тестового плана, который определяет параметры нагрузки (сценарий), а именно, сколько виртуальных пользователей (потоков) будет запускать тест, в каком темпе они начнут выполнение, и как долго будет выполняться тест. Каждый поток в JMeter симулирует отдельного виртуального пользователя, который выполняет запросы и взаимодействует с тестируемой системой или приложением.

9) Для чего нужен Plugins Manager?
Этот инструмент, который упрощает установку, управление и обновление дополнительных плагинов. Плагины в JMeter расширяют стандартные возможности и добавляют новые функции, такие как специализированные типы Thread Group, уникальные сэмплеры, более гибкие таймеры, улучшенные визуализации результатов и многое другое. Plugins Manager помогает легко находить и устанавливать эти плагины, избегая ручной установки и настройки.

10) Для чего нужны конфигурационные элементы?
Они используются для настройки параметров, которые помогают сделать тесты гибкими и централизовать управление данными. Эти элементы позволяют задавать начальные значения и общие настройки для сэмплеров и других элементов, обеспечивая удобство, особенно когда одна и та же информация требуется в нескольких местах тестового плана. С их помощью можно определять параметры, которые будут использоваться для всех запросов, что упрощает управление и обновление тестов.

11) Как можно использовать регулярные выражения в JMeter?
Для динамического извлечения данных из ответов сервера. Например, можно извлечь токены, идентификаторы сессий или любые другие переменные, которые нужны в следующих запросах. В JMeter для работы с регулярными выражениями чаще всего применяется элемент Regular Expression Extractor.
Regular Expression Extractor добавляется в качестве дочернего элемента к сэмплеру, и, если ответ сэмплера совпадает с регулярным выражением, извлечённое значение сохраняется в переменной.
Регулярные выражения можно использовать в элементах проверки, таких как Response Assertion, чтобы удостовериться, что ответ содержит ожидаемые данные.
В некоторых элементах, таких как JDBC Request и BeanShell PostProcessor, регулярные выражения могут использоваться для извлечения и обработки данных, которые поступают в параметры теста.

12) Как работает Boundary Extractor?
Мы применяем его схожим образом с регулярными выражениями, но рботает он с использованием границ текста.
В Reference Name мы указываем имя переменной;
В Left Boundary - левую границу;
В Right Boundary - правую границу; 
В Match Number,  1 — первое совпадение, -1 — случайное совпадение, 0 — все совпадения;
В Default Value - значение по умолчанию.
В зависимости от ответа серевера, мы можем использовать, то что нам более удобно, регулярные выражения или Boundary Extractor.

13) Что такое корреляция?
Процедура извлечения и использования динамических данных, которые зависят от ответов сервера. Она необходима для построения реалистичных сценариев, где значения, передаваемые между запросами, могут изменяться для каждой сессии или пользователя. Примером таких данных могут быть сессионные токены, идентификаторы транзакций, ключи безопасности и другие уникальные значения, которые сервер генерирует для каждой сессии.


14) Какие способы параметризации данных есть в JMeter?
Использование переменных: ${username} 
С помощью CSV Data Set Config: Filename, Variable Names, Delimiter, Recycle on EOF.
User Defined Variables - пользовательские переменные.
Функции JMeter - ${__Time(yyyy-MM-dd)} — генерирует текущую дату в указанном формате.
HTTP Request Defaults с переменными.
Random Variable - случайная переменная.
Counter - Счётчик.

15) В чем отличие User Defined Variables как отдельного конфигурационного элемента от области User Defined Variables в Test Plan?
Область действия:
User Defined Variables (как конфигурационный элемент): Переменные действуют только в пределах того контейнера, в который они были добавлены (например, в конкретном Thread Group или Sampler).
User Defined Variables в Test Plan: Переменные действуют глобально, и они доступны всем элементам теста в рамках этого тестового плана.
Гибкость:
User Defined Variables (как конфигурационный элемент): Подходит для задания переменных, которые должны применяться только в одном месте или для одного потока.
User Defined Variables в Test Plan: Подходит для задания переменных, которые нужны во всем тесте.

16) Для чего нужен HTTP(s) Test Script Recorder?
Для записи HTTP и HTTPS-запросов, выполняемых пользователем, и последующего создания тестов на основе записанных действий. Этот элемент позволяет захватывать трафик веб-браузера и преобразовывать его в запросы JMeter, что значительно упрощает процесс создания нагрузочного теста для веб-приложений.
При помощи него, мы по сути можем записать трафик к любому сетевому устройству.

17) Как управлять кэшем и файлами cookie в JMeter?
Добавить в HTTP Request следующие заголовки:
Cache-Control: no-cache
Pragma: no-cache
Эти заголовки сообщат серверу, что нужно игнорировать кэш и всегда запрашивать актуальные данные.
Пример использования JSR223 Sampler для изменения cookies:
import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.protocol.http.control.CookieManager;

CookieManager cookieManager = sampler.getCookieManager();
cookieManager.getCookies().clear(); // Очистка всех cookies
cookieManager.add(new Cookie("new_cookie", "value", "domain.com", "/", false, 0)); // Добавление нового cookie

18) В чем отличие Pre и Post процессоров в JMeter?
Pre-процессоры выполняются до выполнения сэмплера, а Post-процессоры после.
Цель Pre-процессоров подготовить данные, изменить параметры запроса или выполнить дополнительные действия перед его отправкой. От Post-процессоры же требуется обработать или использовать результаты выполнения запроса (например, извлечь данные из ответа).

19) Для чего нужен JSR223 Sampler?
Позволяет выполнять пользовательский код на различных языках программирования (обычно Groovy), поддерживающих стандарт JSR223 (Java Specification Request 223). Это дает возможность интегрировать различные языки программирования в тесты JMeter и значительно расширить функциональность тестов.

20) Какие виды контроллеров есть в JMeter?
Thread Group Controllers - управляет поведением тестов для группы потоков (пользователей), которые выполняют различные запросы. 
Logic Controllers - логические контроллеры управляют порядком и условиями выполнения сэмплеров (запросов) внутри Thread Group.
Sampler Controllers - выполняются непосредственно в процессе тестирования, при этом они часто определяют логику выполнения запросов.
Transaction Controllers - используются для группировки запросов в одну транзакцию и измерения времени выполнения всех запросов в группе.
Pre-Processors и Post-Processors.

21) Какие виды листенеров есть в JMeter?
Real-time Listeners - эти листенеры предоставляют результаты тестов в реальном времени, позволяя отслеживать выполнение тестов на лету (View Results Tree).
Агрегированные и статистические листенеры - эти листенеры показывают статистику и агрегированные данные, что помогает в анализе производительности и нахождении узких мест в системе (Summary Report).
Листенеры для анализа ошибок и логирования - эти листенеры помогают детально анализировать ошибки и поведение системы, а также записывать логи (Simple Data Writer).
Листенеры для визуализации результатов - эти листенеры отображают результаты в графической форме и помогают быстро анализировать производительность и состояние системы (Plot Results).
Листенеры для создания отчетов - эти листенеры генерируют и сохраняют отчеты для дальнейшего анализа или представления результатов (Dashboard Report).

22) Какая роль у Таймеров в JMeter?
Они позволяют создавать более точные и гибкие тесты, которые имитируют реальные условия эксплуатации, учитывая задержки, сетевые условия и пропускную способность. 
 - Имитация реального поведения пользователя
 - Контроль над скоростью выполнения запросов
 - Регулировка нагрузочного теста
 - Измерение времени отклика с задержками

23) В чем отличие Constant Throughput Timer от Constant Timer?
Constant Timer используется для добавления фиксированной задержки (паузы) между запросами, а Constant Throughput Timer используется для контроля пропускной способности теста — то есть для того, чтобы обеспечить выполнение определённого количества запросов за фиксированный промежуток времени.

24) Для чего нужны Assertions?
Для проверки корректности ответов, отслеживания ошибок, оценки качества тестируемой системы, а также отчётности.
Они помогают убедиться, что приложение не только работает, но и отвечает правильно (правильные данные, корректные коды состояния, соответствующее время отклика и т.д.). Assertions нужны для создания качественных нагрузочных тестов, поскольку они помогают не только тестировать производительность, но и гарантировать правильность функциональности.

25) Какой порядок выполнения элементов тест плана при запуске теста?
Test Plan запускается.
Задаются User Defined Variables.
Начинается выполнение Thread Group.
Выполняются Конфигурационные элементы (например, HTTP Request Defaults).
Выполняются Pre-processors.
Выполняются Samplers (например, HTTP-запросы).
Выполняются Post-processors.
Выполняются Assertions для проверки ответов.
Применяются Timers для задержки между запросами.
Собираются данные в Listeners.
Тест завершён, выполняются действия после теста (если они настроены).

26) Для чего нужен Test Fragment?
Для шаблонизации определённых юзер кейсов, которые планируется повторять в разных тестовых сценариях. Например, если мы хотим создать два сценария в которых мы заходим на сайт, после чего в одном покупаем билеты, а в другом удаляем их, то скрипт по авторизации, нужно добавить в Test Fragment. А в тестовых сценариях, ссылаться уже на него.
Можно сказать, это олицетворение принципа DRY.

27) Как изменить размер выделенной памяти для JMeter?
В файле jmeter.bat, нужно найти строчку set HEAP=-Xms6g -Xmx6g -XX:MaxMetaspaceSize=256m и в значениях Xms, Xmx, указать требуемое значения начального и максимального размера памяти.
Так же по аналогии с запуском jar-файлов, объём выделяемой памяти можно указвать при звпуске из командной строки:
jmeter -n -t UC01A_HabrRegEx.jmx -l ./ -J-Xms1024m -J-Xmx4096m

28) Что такое распределенное тестирование? Поддерживает ли его JMeter?
Это метод тестирования, при котором нагрузка на тестируемую систему генерируется с нескольких машин одновременно, что позволяет имитировать поведение большого числа пользователей. Такой подход используется, когда требуется моделировать высокую нагрузку, превышающую возможности одной машины, или для тестирования в распределенных инфраструктурах.
Apache JMeter поддерживает распределенное тестирование. С помощью мастера и рабочих узлов можно запускать тесты на нескольких машинах, чтобы сгенерировать более высокую нагрузку. JMeter использует подход "мастер-рабочий узел" для распределенного тестирования.
Пример распределённого запуска из командной строки:
jmeter -n -t /path/to/test_plan.jmx -l /path/to/results.jtl -R slave1,slave2
-R указывает список рабочих узлов (например, slave1 и slave2).
Минусы распределенного тестирования:
 - Сетевые задержки
 - Отсутствие графического интерфейса в распределенном режиме
 - Ресурсы

29) Что такое ramp-up период?
Ramp up - период, за который запускаются все запланированные виртуальные пользователи.

30) Что означает 90% line в Aggregate Report?
Обозначает время, которое требуется для того, чтобы 90% всех запросов были выполнены быстрее, чем это время. Это важный метрик, используемый для оценки производительности системы, потому что он помогает понять, как быстро система обрабатывает запросы для большинства пользователей.
Другими словами, это перцентиль, который сообщает, что 90% запросов заняли меньше времени, чем указанный показатель.


