Тело скрипта:
----------------------------------------------------------------------
#!/bin/bash

# Переходим в директорию, где расположен сам скрипт
cd "$(dirname "${BASH_SOURCE[0]}")"

# Создаем 24 папки.
for hour in {0..23}; do
  folder="dir_${hour}h"
  mkdir -p "$folder"
done

# Определяем текущий час и выбираем соответствующую папку.
current_hour=$(date +'%H')   # Получаем час в 24-часовом формате.
current_hour=$((10#$current_hour)) # Убираем ведущий ноль.
folder="dir_${current_hour}h"

# Переходим в нужную папку.
cd "$folder"

# Скачиваем 10+ изображений в текущую папку.
# Пример: скачиваем изображения с https://picsum.photos.
for i in {1..10}; do
  wget -q "https://picsum.photos/200/300?random=$i" -O "image_${i}.jpg"
done

# Возвращаемся в начальную директорию.
cd ..

# Проверка на конец суток: архивируем все папки, если текущий час — 0 (полночь).
if [ "$current_hour" -eq 00 ]; then
  tar -czf images_$(date +'%Y-%m-%d').tar.gz dir_*h
  echo "Архив all_images_$(date +'%Y-%m-%d').tar.gz создан."
fi
----------------------------------------------------------------------


(Вопрос: Изучите и расскажите, как работает команда chmod)
1. Команда chmod в UNIX и Linux системах используется для изменения прав доступа к файлам и каталогам. Она позволяет задавать, кто и что может делать с файлом: читать, записывать или выполнять.
Команда chmod использует числовое (октавальное) представление для задания прав доступа, определяет права для:
	- Владельца файла,
	- Группы, которой принадлежит файл,
	- Остальных пользователей (другие).
Каждое число в chmod соответствует определенному набору прав:
	- Чтение (r) — обозначается числом 4,
	- Запись (w) — обозначается числом 2,
	- Выполнение (x) — обозначается числом 1.
Допустим, мы хотим установить права chmod 755:
	- Первое число 7: это права владельца.
7 = 4 (чтение) + 2 (запись) + 1 (выполнение), то есть владелец имеет полный доступ.
	- Второе число 5: это права для группы.
5 = 4 (чтение) + 1 (выполнение), то есть группа может читать и выполнять файл, но не изменять его.
	- Третье число 5: это права для остальных пользователей.
5 = 4 (чтение) + 1 (выполнение), то есть остальные пользователи также могут только читать и выполнять файл, но не изменять его.


(Вопрос: Изучите и расскажите, что такое Cron)
2.Cron — это служба планировщика задач в UNIX и Linux-системах, которая позволяет автоматически запускать команды и скрипты по расписанию. Cron удобен для выполнения регулярных задач, таких как резервное копирование, очистка системных логов, обновление данных и запуск скриптов в заданное время.
Основные особенности Cron:
	- Периодичность: задачи можно планировать на определенные минуты, часы, дни, месяцы и дни недели.
	- Гибкость: расписание легко настраивается под различные нужды: ежедневные, еженедельные, ежемесячные и даже более сложные циклы.
	- Фоновый режим: Cron работает в фоновом режиме, автоматически запуская задачи в установленное время, не требуя вмешательства пользователя.
Основные команды для работы с crontab:
	- crontab -e — открытие файла crontab для редактирования.
	- crontab -l — просмотр списка текущих задач cron для текущего пользователя.
	- crontab -r — удаление текущего файла crontab (все задачи пользователя будут удалены).

* * * * * команда
│ │ │ │ │
│ │ │ │ └── День недели (0-7) (0 или 7 = воскресенье)
│ │ │ └──── Месяц (1-12)
│ │ └────── День месяца (1-31)
│ └──────── Час (0-23)
└────────── Минута (0-59)

Cron, как правило, отправляет результаты выполнения задач и любые ошибки на почту пользователя. Но ещё в crontab можно перенаправить вывод и ошибки в лог-файлы, добавив > /path/to/logfile 2>&1 в конце строки cron.


(Вопрос: Изучите команду chown и расскажите, чем она отличается от chmod)
3.Команда chown используется для изменения владельца и группы файла или каталога, в то время как команда chmod управляет правами доступа к этим файлам и каталогам. 
Отличия:
	- chmod управляет правами (чтение, запись, выполнение) для каждого уровня доступа (владелец, группа, остальные).
	- chown управляет владельцем и группой файла или каталога, т.е. указывает, какой пользователь и какая группа будут считаться "хозяевами" файла.
	- chmod влияет на то, какие действия могут выполнять различные пользователи над файлом (например, чтение или изменение).
	- chown меняет информацию о том, кому принадлежит файл или каталог, что может быть важно, когда нужно назначить ответственного за файл.
	- Если владелец файла bob передает его на управление пользователю alice, он использует chown alice файл.txt.
	- Если он хочет, чтобы файл был доступен для чтения и выполнения группой, он использует chmod 755 файл.txt.


(Вопрос: Изучите команду find и расскажите как ей пользоваться и с чем её можно совместить)
4. find - ищет файлы согласно заданным атрибутам в указанном каталоге.
	find [начальный_каталог] [опции] [действия]
	- начальный_каталог — каталог, с которого начинается поиск. Обычно указывают . (текущий каталог) или / (корневой каталог).
	- опции — критерии поиска, такие как имя, тип, размер и т.д.
	- действия — команды или действия, которые будут выполняться над найденными файлами, например, вывод имени файла или его удаление.
 Пример использования:
	find /home -user tisha 2>/dev/null
	Таким образом можно найти все файлы пользователя tisha в каталоге home, а 2>/dev/null сделает выдачу чистой без ошибок в отказе доступа.
	find /путь/к/каталогу -name "*.txt" -exec cp {} /путь/к/целевому/каталогу/ \;
	Ищет все .txt файлы и копирует их в указанный каталог.


(Вопрос: Изучите команды cp и mv и как ими пользоваться)
5. cp - Команда предназанченая для 
Команда  cp - предназначенная для копирования файла или директории.
	cp файл.txt копия_файла.txt
	cp -r /путь/к/каталогу /путь/к/новому_каталогу
	-r (рекурсивная копия) копирует каталог вместе со всеми файлами и подкаталогами.
	cp -i файл.txt /путь/к/каталогу/
	-i (interactive) спрашивает подтверждение перед перезаписью, если в каталоге назначения уже существует файл с таким именем.

Командой mv - можно как перемещать файлы или директории, так и переименовывать их.
	mv старое_имя.txt новое_имя.txt
	или
	mv файл.txt /путь/к/другому/каталогу/
	mv файл.txt /путь/к/другому/каталогу/новое_имя.txt
	Перемещает файл.txt в другой каталог и одновременно переименовывает его в новое_имя.txt.
	mv -i файл.txt /путь/к/каталогу/
	-i запрашивает подтверждение, если в каталоге назначения уже есть файл с таким именем.


